@page "/taskDetails"
@page "/taskDetails/{id}"
@inject ITaskService TaskService
@inject ITaskStateService TaskStateService
@inject IUserService UserService
@inject NavigationManager NavigationManager


<h1>Task Details</h1>

<div style="max-width: 40%;">
    <EditForm Model="@task" Context="editContext">
        <MudTextField Label="Title" @bind-Value="task.Title" />
        <MudTextField Label="Description" @bind-Value="task.Description" multiline rows="4" />
        <MudSelect Label="Status" @bind-Value="task.StateId">
            @foreach (var state in taskStates)
            {
                <MudSelectItem Value="@state.StateId">@state.StateName</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Label="User" @bind-Value="task.UserId" FullWidth>
            @foreach (var user in users)
            {
                <MudSelectItem Value="@user.ID">@user.Name</MudSelectItem>
            }
        </MudSelect>
        <div style="margin-top: 30px;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveTask">Save</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="Cancel">Cancel</MudButton>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public string id { get; set; }

    private TaskDTO task = new TaskDTO();
    private IEnumerable<TaskStateDTO> taskStates = new List<TaskStateDTO>();
    private IEnumerable<UserDTO> users = new List<UserDTO>();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(task);
        taskStates = await TaskStateService.GetAllTaskStates();
        users = await UserService.GetAllUsers();

        if (!string.IsNullOrEmpty(id) && id != "new")
        {
            task = await TaskService.GetTaskDetails(id);
        }
    }

    protected async Task SaveTask()
    {
        await TaskService.SaveTask(task);
        NavigationManager.NavigateTo("/tasks");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/tasks");
    }
}